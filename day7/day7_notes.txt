IIFE / Self Invoked
====
-Immediately Invoked Function Expression
-To invoke a function only Once when page loads




Function Curring
================
-Function Currying is a concept of breaking a function with many arguments into many functions with single argument in such a way, that the output is same. 
-its a technique of simplifying a multi-valued argument function into single-valued argument multi-functions.
-It helps to create a higher-order function. It is extremely helpful in event handling.

	var add = function (a){
                 return function(b){
                       return function(c){
                                 return a+b+c;
                              }        
                        }
                  }
	console.log(add(2)(3)(4)); //output 9



Pure Function
=============
-Pure functions are functions that accept an input and returns a value without 
 modifying any data outside its scope(Side Effects). 
 
-A function is called pure if that follows the below 3 standards
	1. Pure functions shouldn't update the data outside it's scope.
	2. pure functions must return a value.
	3. Its output or return value must depend on the input/arguments.




Higher-order Function
=====================
-Higher-order function is a function that may receive a function as an argument and/or can even return a function. 
-a function can be called as a Higher-order if that function has either of the below 2 abilities:
	1. a function has ability to return another function.
	2. a function has ability to take another function as argument.
-Array filter(),map(),reduce(),sort() are some of the Higher-Order functions.

HigherOrder : A function that takes another function as arguement
CallBack : A function that which is used as an argument inside another function



function recursion
==================
-A recursive function is a function that calls itself until the program achieves the desired result.
-A recursive function should have a condition that stops the function from calling itself.otherwise, 'RangeError: Maximum call stack size exceeded'  error will be thrown
-A recursive function can be used instead of a loop where we don't know how many times the loop needs to be executed.

ex: function countDown(fromNumber) {
		console.log(fromNumber);
		let nextNumber = fromNumber - 1;
		if (nextNumber > 0) {
			countDown(nextNumber);
		}
	}
	countDown(5);



Memoization
===========
-Memoization is a programming technique that attempts to increase a function’s performance by caching its previously computed results.
-Memoization is an optimization technique used to speed up performance by storing the results of expensive function calls and returning the cached result when the same inputs occur again.
-its a kind of caching the data.
-used with recursion.



function closure
================
-A closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment). In other words, a closure gives a function access to its outer scope. 

-A closure is a concept where an inner function has access to its outer function's variables even after the outer function's execution is Completed/Closed.

-When an inner function accesses any data from the outer function, a 'closure' scope gets attached to the inner function.
 hence inner function can access outer function data.

-When the outer function execution completes, we would expect all its variables to be no longer accessible. However, if the inner function uses variables from the outer function, those variables remain accessible.

-The inner function retains access to the outer function’s scope, because the inner function ‘remembers’ the environment in which it was created.


Note:
-Today’s JavaScript supports real encapsulation with classes and #private fields.
-Closures are no longer the only way to achieve encapsulation, but they still have valid use-cases, especially in functional programming or factory functions.


Closure Disadvantages
=====================
-As long as the closure are active , the memory can't be garbage collected. 
-If we are using closure in ten places then unless all the ten process complete 
 it hold the memory which cause memory leak.